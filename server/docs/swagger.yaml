basePath: /api/v1
definitions:
  dto.CreateAssignmentRequest:
    properties:
      assignee_id:
        type: integer
      created_by:
        type: integer
      description:
        type: string
      title:
        type: string
    required:
    - created_by
    - title
    type: object
  dto.CreateDepartmentRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.CreateMemberRequest:
    properties:
      department_id:
        type: integer
      email:
        type: string
      join_date:
        type: string
      name:
        type: string
      phone_number:
        type: string
      position_id:
        type: integer
    required:
    - department_id
    - email
    - join_date
    - name
    - position_id
    type: object
  dto.CreatePositionRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.UpdateAssignmentRequest:
    properties:
      assignee_id:
        type: integer
      description:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  dto.UpdateDepartmentRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.UpdateMemberRequest:
    properties:
      department_id:
        type: integer
      email:
        type: string
      join_date:
        type: string
      name:
        type: string
      phone_number:
        type: string
      position_id:
        type: integer
    type: object
  dto.UpdatePositionRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.UserResponse:
    properties:
      message:
        type: string
      user_id:
        type: integer
    type: object
  model.Assignment:
    properties:
      assignee:
        $ref: '#/definitions/model.Member'
      assigneeID:
        description: 被分配任务的成员ID
        type: integer
      createdAt:
        type: string
      createdBy:
        description: 创建任务的用户ID
        type: integer
      creator:
        $ref: '#/definitions/model.User'
      deletedAt:
        type: string
      departmentID:
        type: integer
      description:
        type: string
      endDate:
        type: string
      id:
        type: integer
      positionID:
        type: integer
      startDate:
        type: string
      status:
        description: '状态: pending, in_progress, completed'
        type: string
      title:
        type: string
      updatedAt:
        type: string
    type: object
  model.Department:
    properties:
      children:
        items:
          $ref: '#/definitions/model.Department'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      parent:
        $ref: '#/definitions/model.Department'
      parentID:
        description: 支持层级结构 (父部门ID)，指针类型以允许为NULL
        type: integer
      updatedAt:
        type: string
    type: object
  model.Member:
    properties:
      assignments:
        description: 一个会员可以有多个任期分配
        items:
          $ref: '#/definitions/model.Assignment'
        type: array
      avatarURL:
        type: string
      college:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      departmentID:
        type: integer
      email:
        type: string
      expectedGraduationDate:
        type: string
      grade:
        description: 年级，如 "2022级"
        type: string
      id:
        type: integer
      joinDate:
        type: string
      major:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      positionID:
        type: integer
      status:
        description: '状态: active, graduated, inactive'
        type: string
      studentID:
        type: string
      updatedAt:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/model.User'
        description: 关联用户表
      userID:
        type: integer
    type: object
  model.Position:
    properties:
      accessLevel:
        description: 权限等级，数字越大权限越高
        type: integer
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      name:
        description: 如 "会长", "部长", "部员"
        type: string
      updatedAt:
        type: string
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        description: 角色 (e.g., 'admin', 'member')
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the API documentation for the NWUCA Management System.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: NWUCA Management System API
  version: "1.0"
paths:
  /assignments:
    get:
      description: Get a list of all assignments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Assignment'
            type: array
        "500":
          description: Failed to get assignments
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all assignments
      tags:
      - assignments
    post:
      consumes:
      - application/json
      description: Create a new assignment
      parameters:
      - description: Assignment creation info
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAssignmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Assignment'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to create assignment
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new assignment
      tags:
      - assignments
  /assignments/{id}:
    delete:
      description: Delete an assignment by ID
      parameters:
      - description: Assignment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid assignment ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to delete assignment
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an assignment
      tags:
      - assignments
    put:
      consumes:
      - application/json
      description: Update an existing assignment by ID
      parameters:
      - description: Assignment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Assignment update info
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAssignmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Assignment'
        "400":
          description: Invalid request body or ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update assignment
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing assignment
      tags:
      - assignments
  /departments:
    get:
      description: Get a list of all departments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Department'
            type: array
        "500":
          description: Failed to get departments
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all departments
      tags:
      - departments
    post:
      consumes:
      - application/json
      description: Create a new department
      parameters:
      - description: Department creation info
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDepartmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Department'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to create department
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new department
      tags:
      - departments
  /departments/{id}:
    delete:
      description: Delete a department by ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid department ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to delete department
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a department
      tags:
      - departments
    put:
      consumes:
      - application/json
      description: Update an existing department by ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      - description: Department update info
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateDepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Department'
        "400":
          description: Invalid request body or ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update department
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing department
      tags:
      - departments
  /login:
    post:
      consumes:
      - application/json
      description: Log in a user with email and password
      parameters:
      - description: User login info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Log in a user
      tags:
      - users
  /members:
    get:
      description: Get a list of all members
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Member'
            type: array
        "500":
          description: Failed to get members
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all members
      tags:
      - members
    post:
      consumes:
      - application/json
      description: Create a new member
      parameters:
      - description: Member creation info
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMemberRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Member'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to create member
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new member
      tags:
      - members
  /members/{id}:
    delete:
      description: Delete a member by ID
      parameters:
      - description: Member ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid member ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to delete member
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a member
      tags:
      - members
    put:
      consumes:
      - application/json
      description: Update an existing member by ID
      parameters:
      - description: Member ID
        in: path
        name: id
        required: true
        type: integer
      - description: Member update info
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMemberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Member'
        "400":
          description: Invalid request body or ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update member
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing member
      tags:
      - members
  /positions:
    get:
      description: Get a list of all positions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Position'
            type: array
        "500":
          description: Failed to get positions
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all positions
      tags:
      - positions
    post:
      consumes:
      - application/json
      description: Create a new position
      parameters:
      - description: Position creation info
        in: body
        name: position
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePositionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Position'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to create position
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new position
      tags:
      - positions
  /positions/{id}:
    delete:
      description: Delete a position by ID
      parameters:
      - description: Position ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid position ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to delete position
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a position
      tags:
      - positions
    put:
      consumes:
      - application/json
      description: Update an existing position by ID
      parameters:
      - description: Position ID
        in: path
        name: id
        required: true
        type: integer
      - description: Position update info
        in: body
        name: position
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePositionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Position'
        "400":
          description: Invalid request body or ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update position
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing position
      tags:
      - positions
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, email, and password
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to register user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
